#!/usr/bin/env ruby
# startor

# 20181028
# 0.4.0

# History: Derived from https://kremalicious.com/simple-tor-setup-on-mac-os-x/...

# Prerequisites:
# 1. tor binary is installed.
# 2. Ruby is installed, which it should be already!

# Suggested method for installation of prerequisites:
# 1. Install brew: `/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"`.
# 2. Install tor with brew: `brew install tor`.

# How to use:
# 1. Press the <cmd> and <space> keys on the keyboard simultaneously.
# 2. Type: "Terminal.app" and press the <return> key.
# 3. Type: "startor" and press the <return> key.

# Notes:
# 1. The hardware ports can be any of: 'Thunderbolt Ethernet', 'Thunderbolt Bridge', 'Wi-Fi', 'Ethernet', 'Bluetooth PAN', or 'Display Ethernet'.
# 2. See `networksetup -listallnetworkservices` for the complete list of hardware ports on your machine.

# Changes:
# Decided that I wanted to have the functionality of both 0.2.0 which startor remains running and 0.3.0 which passes control from startor to tor.
# 1. ~ main(), so that it will call either explicit_up() or implicit_up().
# 2. + explicit_up(), which is called when the subcommand 'up' is used.
# 3. + implicit_up(), which is called when no subcommand is supplied.
# 4. ~ up(), so that it does all the preparatory work it previously did, except start tor itself.
# 5. /start_tor()/system_tor()/, which keeps startor running.
# 6. + exec_tor(), which passess control from startor to tor.
# 7. Added some instructions on how to use.

require 'FileUtils/which'
require 'Kernel/run'
require 'OSX/HardwarePort'
require 'OSX/IfConfig'

def check_for_tor_program
  unless FileUtils.which('tor')
    puts 'tor was not found.  Install tor first.'
    exit
  end
end

def enter_admin_password
  system('sudo -v')
end

def active_network_interfaces
  OSX::IfConfig.new.active_interfaces
end

def active_network_ports
  active_network_interfaces.collect do |active_network_interface|
    if hardware_port = OSX::HardwarePort.find_by_device(active_network_interface)
      hardware_port.name
    end
  end.compact
end

def setup_interfaces
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxy '#{active_network_port}' 127.0.0.1 9050 off", show: true)
  end
end

def puts_with_colour(string, colour)
  system("echo \"$(tput setaf #{colour})\"")
  puts string
  system('echo "$(tput sgr0)"') # color reset
end

def puts_green(string)
  puts_with_colour(string, 64) # Set console text colour to green(ish).
end

def puts_orange(string)
  puts_with_colour(string, 136) # Set console text colour to orange.
end

def enable_proxy
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxystate '#{active_network_port}' on", show: true)
    puts_green('SOCKS proxy 127.0.0.1:9050 enabled.')
    puts_orange('Starting Tor...')
  end
end

def system_tor
  system('tor')
end

def exec_tor
  exec('tor')
end

def disable_proxy
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxystate '#{active_network_port}' off", show: true)
    puts_green('SOCKS proxy disabled.')
  end
end

def common_up
  check_for_tor_program
  enter_admin_password
  setup_interfaces
  enable_proxy
end

def explicit_up
  common_up
  exec_tor
end

def implicit_up
  common_up
  system_tor
end

def down
  disable_proxy
end

def main
  case ARGV[0]
  when 'up'; explicit_up
  when 'down'; down
  else; implicit_up
  end
rescue SystemExit, Interrupt
  down
end

main
