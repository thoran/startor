#!/usr/bin/env ruby
# startor

# 20181107
# 0.6.2

# History: Derived from https://kremalicious.com/simple-tor-setup-on-mac-os-x/...

# Prerequisites:
# 1. tor binary is installed.
# 2. Ruby is installed, which it should be already!

# Installation:
# 1. Press the <cmd> and <space> keys on the keyboard simultaneously.
# 2. Type: "Terminal.app" and press the <return> key.
# 3. Type: "gem install startor"

# How to use:
# 1. Press the <cmd> and <space> keys on the keyboard simultaneously.
# 2. Type: "Terminal.app" and press the <return> key.
# 3. Type: "startor setup" and press the <return> key.
# 4. Type: "startor" and press the <return> key.
# 5. If prompted, enter the password you use to login to your computer.
# 6. When wanting stop tor, go to the same window as the commands immediately above were entered and press the <ctrl> and <c> keys on the keyboard simultaneously.
# 7. If prompted, enter the password you use to login to your computer.

# Notes:
# 1. The hardware ports can be any of: 'Thunderbolt Ethernet', 'Thunderbolt Bridge', 'Wi-Fi', 'Ethernet', 'Bluetooth PAN', or 'Display Ethernet'.
# 2. See `networksetup -listallnetworkservices` for the complete list of hardware ports on your machine.

# Todo: (one or more of the following, in no particular order)
# 1. Turn this into a gem.  Done as of 0.6.0.
# 2. Turn this into a brew formula.
# 3. Remove some of the comments here and put those into a README or INSTALL or other files as appropriate.
# 4. Create a(n) .app out of this by using some simple wrapper code.
# 5. Make it cross-platform: OSX, Linux, and Windows, at least.
# 6. Clean up the required libraries so that they are either gemified and/or reduced in number.

# Changes:
# Gemification and further tidying...
# 1. + startor.gemspec
# 2. Added to the section of comments entitled "Installation", which includes making use of the startor gem.
# 0/1
# 3. + lib/String/grep.rb, which had been left out after attempting to gather together all the requisite libraries for each version of startor prior to putting into a git repo and publishing yesterday.  I am needing to just create a repo from dot, have tests in place, and/or a sandbox to ensure that libraries I already have installed don't mislead me into thinking that I have all the dependencies intalled.
# 4. + lib/String/each.rb, which is a dependency of String#grep's.
# 5. + lib/String/each_char.rb, which is a dependency of String#each's.
# 6. + lib/String/each_line.rb, which is a dependency of String#each's.
# 7. Updated lib/Version.rb, so that: /require 'String/capture'/require 'Thoran/String/Capture/capture'/, which I should have done as of startor 0.3.0 when gathering the libraries, since that post-dates the change to Version.rb.
# 8. - lib/String/capture.rb
# 9. ~ .gitignore: + *.gem, so that gem builds don't go in the repo without me having to remove them manually when I do `git add .`.
# 2/3
# Don't install homebrew or tor needlessly if issuing `startor setup`...
# 10. + homebrew_installed?()
# 11. ~ install_homebrew() to make use of homebrew_installed?().
# 12. ~ install_tor() to make use of tor_installed?(), though this is a bit redundant, since setup() should control whether install_tor() is run anyway.
# 13. ~ setup(), so that it doesn't needlessly install brew, because tor is already installed.

require 'FileUtils/which'
require 'Kernel/run'
require 'OSX/HardwarePort'
require 'OSX/IfConfig'

def install_homebrew
  if homebrew_installed?
    puts 'Homebrew is already installed!'
  else
    run('/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"', show: true)
  end
end

def install_tor
  if tor_installed?
    puts 'tor is already installed!'
  else
    run('brew install tor', show: true)
  end
end

def setup
  unless tor_installed?
    install_homebrew
    install_tor
  end
end

def tor_installed?
  FileUtils.which('tor')
end

def homebrew_installed?
  FileUtils.which('brew')
end

def check_for_tor_program
  unless tor_installed?
    puts "tor was not found.  You must install tor first."
    puts "The easist way to install it is by running `startor setup`."
    exit
  end
end

def enter_admin_password
  system('sudo -v')
end

def active_network_interfaces
  OSX::IfConfig.new.active_interfaces
end

def active_network_ports
  active_network_interfaces.collect do |active_network_interface|
    if hardware_port = OSX::HardwarePort.find_by_device(active_network_interface)
      hardware_port.name
    end
  end.compact
end

def setup_interfaces
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxy '#{active_network_port}' 127.0.0.1 9050 off", show: true)
  end
end

def puts_with_colour(string, colour)
  system("echo \"$(tput setaf #{colour})\"")
  puts string
  system('echo "$(tput sgr0)"') # color reset
end

def puts_green(string)
  puts_with_colour(string, 64) # Set console text colour to green(ish).
end

def puts_orange(string)
  puts_with_colour(string, 136) # Set console text colour to orange.
end

def enable_proxy
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxystate '#{active_network_port}' on", show: true)
    puts_green('SOCKS proxy 127.0.0.1:9050 enabled.')
    puts_orange('Starting Tor...')
  end
end

def system_tor
  system('tor')
end

def exec_tor
  exec('tor')
end

def disable_proxy
  active_network_ports.each do |active_network_port|
    run("sudo networksetup -setsocksfirewallproxystate '#{active_network_port}' off", show: true)
    puts_green('SOCKS proxy disabled.')
  end
end

def common_up
  check_for_tor_program
  enter_admin_password
  setup_interfaces
  enable_proxy
end

def explicit_up
  common_up
  exec_tor
end

def implicit_up
  common_up
  system_tor
end

def down
  disable_proxy
end

def main
  case ARGV[0]
  when 'up'; explicit_up
  when 'down'; down
  when 'setup'; setup
  else; implicit_up
  end
rescue SystemExit, Interrupt
  down if tor_installed?
end

main
